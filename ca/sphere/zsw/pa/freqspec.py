#======================================================================
# Creates frequency power spectra for phi_j(t)-phi_j(0) and v_j(t) from
# data previously generated by pam.f90.
#======================================================================

#=====perform various generic imports=====
import warnings,os,sys
import numpy as np

import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

## global settings

# set tick label size:
label_size = 25
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 10
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 5
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 10
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 5
mpl.rcParams['ytick.minor.width'] = 1

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)
#=========================================

# Get initial phi from init.asc:
in_file=open('init.asc','r')
x0, x1, x2, x3 = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()

# Number of intervals:
n=len(x0)

# Initial phi array:
phi0=np.empty(n)
phi0[0]=0.5*(x0[0]-np.pi/2.0)
phi0[1:]=0.5*(x0[0:n-1]+x0[1:n])

# Mass weight array:
w=x1

# Read data:
datafile='phi.r8'
file_bytes = os.path.getsize(datafile)
nt = int(file_bytes/((n+1)*8))
print (' Number of time frames: %d' %nt)
print('')
frames = range(nt)
print (' Reading data from phi.r8...')
in_file = open(datafile,'r')
raw_array = np.fromfile(in_file,dtype=np.float64)
d = np.empty((nt,n))
for i in frames:
   d[i,:] = raw_array[i*(n+1)+1:(i+1)*(n+1)] - phi0
in_file.close()    
time=np.array([raw_array[i*(n+1)] for i in frames])

datafile='u.r8'
print (' Reading data from u.r8...')
in_file = open(datafile,'r')
raw_array = np.fromfile(in_file,dtype=np.float64)
u = np.empty((nt,n))
for i in frames:
   u[i,:] = raw_array[i*(n+1)+1:(i+1)*(n+1)]
in_file.close()    

datafile='v.r8'
print (' Reading data from v.r8...')
in_file = open(datafile,'r')
raw_array = np.fromfile(in_file,dtype=np.float64)
v = np.empty((nt,n))
for i in frames:
   v[i,:] = raw_array[i*(n+1)+1:(i+1)*(n+1)]
in_file.close()    

print('')
print (' Creating frequency spectra...')

# Create array holding the frequencies:
time_step = time[1] - time[0]
freqs = np.fft.fftfreq(time.size, time_step)

# Accumulate power spectra:
Sd=np.zeros(nt)
Su=np.zeros(nt)
Sv=np.zeros(nt)
for k in range(n):
   ps=np.abs(np.fft.fft(d[:,k]))**2
   Sd=Sd+w[k]*ps
   ps=np.abs(np.fft.fft(u[:,k]))**2
   Su=Su+w[k]*ps
   ps=np.abs(np.fft.fft(v[:,k]))**2
   Sv=Sv+w[k]*ps

# As signal is real, fold over and add spectrum:
nh_times=int((nt-1)/2)
for i in range(1,nh_times):
   Sd[i]=Sd[i]+Sd[nt-i]
   Su[i]=Su[i]+Su[nt-i]
   Sv[i]=Sv[i]+Sv[nt-i]

logomega=np.log10(freqs[1:nh_times])
logSd=np.log10(Sd[1:nh_times])
logSu=np.log10(Su[1:nh_times])
logSv=np.log10(Sv[1:nh_times])

# Limits in log_10{f}:
xlims=[-1.0,0.4]

in_file=open('freq.asc','r')
f_lin = np.loadtxt(in_file,dtype=float,unpack=True)
in_file.close()
f_lin=np.log10(f_lin)
c_lin=['m','g','m','g','m','g','m','g','m','g','m','g','m','g','m','g','m','g']

#------------------------------------------------------------------------
# Plot S vs omega:
fig1 = plt.figure(1,figsize=[10,6])
ax1 = fig1.add_subplot(111)
ax1.set_xlabel('$\log_{10}f$', fontsize=30)
ax1.set_ylabel('$\log_{10}{\mathcal{P}}_d$', fontsize=30)
ax1.set_xlim(xlims)
ax1.plot(logomega,logSd,c='k',lw=1)
for m,f in enumerate(f_lin):
   ax1.axvline(f,color=c_lin[m],linestyle='--')
fig1.savefig('d_fspec.eps', format='eps', dpi=600)

fig2 = plt.figure(2,figsize=[10,6])
ax2 = fig2.add_subplot(111)
ax2.set_xlabel('$\log_{10}f$', fontsize=30)
ax2.set_ylabel('$\log_{10}{\mathcal{P}}_u$', fontsize=30)
ax2.set_xlim(xlims)
ax2.plot(logomega,logSu,c='k',lw=1)
for m,f in enumerate(f_lin):
   ax2.axvline(f,color=c_lin[m],linestyle='--')
fig2.savefig('u_fspec.eps', format='eps', dpi=600)

fig3 = plt.figure(3,figsize=[10,6])
ax3 = fig3.add_subplot(111)
ax3.set_xlabel('$\log_{10}f$', fontsize=30)
ax3.set_ylabel('$\log_{10}{\mathcal{P}}_v$', fontsize=30)
ax3.set_xlim(xlims)
ax3.plot(logomega,logSv,c='k',lw=1)
for m,f in enumerate(f_lin):
   ax3.axvline(f,color=c_lin[m],linestyle='--')
fig3.savefig('v_fspec.eps', format='eps', dpi=600)

print('')
print(' Frequency spectra available in d_fspec.eps, u_fspec.eps & v_fspec.eps')
