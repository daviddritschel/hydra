#!/usr/bin/env python

# This script plots spectra for a chosen field

#=====perform the various generic imports========
import warnings
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors as clrs
# Set default plot save resolution to a large value:
mpl.rcParams['savefig.dpi'] = 200
# Set label size:
mpl.rcParams['xtick.labelsize'] = 30
mpl.rcParams['ytick.labelsize'] = 30
mpl.rcParams['axes.linewidth'] = 3
warnings.simplefilter("ignore",DeprecationWarning)

#========================================
#=====----------Main code----------======
#========================================

print()
print('   ---------------------------------------------')
print('   | Plots 1d power spectra for a chosen field |')
print('   ---------------------------------------------')
print()
print(' Choose one of the following:')
print()
print('   (1)  PV anomaly, q, or')
print('   (2)  relative vorticity, zeta')
print()
opt_in = input(' Option (default 1)? ')
option = int(opt_in or 1)

file='qspec.asc'
if option==1:
   labely='$\log_{10}\,|\hat{q}|^2$'
else:
   labely='$\log_{10}\,|\hat{\\zeta}|^2$'
   in_file=open('src/parameters.f90','r')
   fread=in_file.readlines()
   for line in fread:
      if ':: kd=' in line:
         pline=line

   line=pline.split("=")[1]
   txt=line.split(",")[0]
   kd=float(txt.rstrip("d0"))
   
# Open input file:
in_file=open(file,'r')
# Read the first header line to get kmax:
first_line=in_file.readline()
kmax=int(first_line.split()[-1])
in_file.seek(0)

# Plot only to the de-aliasing cutoff:
kc=int(2.0*float(kmax)/3.0)
print()
print(' Plotting up to the de-aliasing wavenumber kc = %i' %kc)
xmin=0.0
xmax=0.1*int(10.0*np.log10(float(kc))+1.0)

nx=kc

# Set the number of frames:
raw_data = np.fromfile(file=in_file,dtype=float,sep='\n')
in_file.close()
nframes = int(len(raw_data)/(2*kmax+4))  
print()
print(' Number of time frames found: %i' %nframes)
print()

# Shape the data array(s) for plotting and work out
# min/max values over all time:
frames=range(0,nframes)
time_eles = [i*(2*kmax+4)+j for i in frames for j in range(4)]
time=np.empty(nframes)
for i in frames:
   time[i]=raw_data[i*(2*kmax+4)]
shaped_data=np.delete(raw_data,time_eles)[0:(2*kmax+4)*nframes].reshape((nframes,kmax,2))

k=np.zeros((nframes,nx))
s1=np.zeros((nframes,nx))
smin=1000.0
smax=-1000.0
for i in frames:
   k[i,:]=shaped_data[i].transpose()[0][0:nx]
   s1[i,:]=shaped_data[i].transpose()[1][0:nx]
   if option==2:
      s1[i,:]=s1[i,:]*k[i,:]**2/(k[i,:]**2+kd**2)
   smin=min(smin,np.amin(s1[i,:]))
   smax=max(smax,np.amax(s1[i,:]))

smin=0.5*int(2.0*(smin+1000.0))-1000.0
smax=0.5*int(2.0*(smax+1000.0)+1.0)-1000.0

ymax_in = input(' Maximum log_10(spectrum) to plot (default '+str(smax)+')? ')
ymax = float(ymax_in or smax)

smin=smax-10.0
ymin_in = input(' Minimum log_10(spectrum) to plot (default '+str(smin)+')? ')
ymin = float(ymin_in or smin)

print()

#======================================================================
# Grab the correct sub-array for plotting (ic is the current frame):
global ic 
ic = 0

# Initiate a plotting window and plot relevant data into it:
fig = plt.figure(1,figsize=[10,10])
fig.subplots_adjust(bottom=0.2,left=0.2)
ax = fig.add_subplot(111)
im1 = ax.plot(k[ic],s1[ic],'k-',lw=2)

# Set plot title, legend and limits of the plot:
ax.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
ax.set_xlabel('$\log_{10}\,k$', fontsize=30)
ax.set_ylabel(labely, fontsize=30)
ax.tick_params(length=10, width=3)
ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

def on_press(event):
  # Routine to deal with re-plotting the window on keypress. 
  # The keys -/= (ie. -/+ without the shift key) cycle through frames 
  # forward and backwards.
  global ic
  if event.key=='=':
    axes=event.canvas.figure.get_axes()[0]
    ic = (ic+1+nframes) % nframes
    xlim=axes.get_xlim()
    ylim=axes.get_ylim()

    # Clear the axes for replot:
    axes.clear()

    # Replot the relevant data:
    axes.plot(k[ic],s1[ic],'k-',lw=2)

    # Set the title, legend and plot limits:
    axes.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
    axes.set_xlabel('$\log_{10}\,k$', fontsize=30)
    axes.set_ylabel(labely, fontsize=30)
    axes.tick_params(length=10, width=3)
    axes.set_xlim(xlim)  
    axes.set_ylim(ylim)
    plt.draw()

  if event.key=='-':
    axes=event.canvas.figure.get_axes()[0]
    ic = (ic-1+nframes) % nframes
    xlim=axes.get_xlim()
    ylim=axes.get_ylim()

    # Clear the axes for replot:
    axes.clear()

    # Replot the relevant data:
    axes.plot(k[ic],s1[ic],'k-',lw=2)

    # Set the title, legend and plot limits:
    axes.set_title('$t =$'+str('%.2f'%time[ic]), fontsize=30)
    axes.set_xlabel('$\log_{10}\,k$', fontsize=30)
    axes.set_ylabel(labely, fontsize=30)
    axes.tick_params(length=10, width=3)
    axes.set_xlim(xlim)  
    axes.set_ylim(ylim)

    # Finally redraw the plot:
    plt.draw()

# Begin the plot and link keypress events to the above handler:
cid=fig.canvas.mpl_connect('key_press_event',on_press)
plt.show()
