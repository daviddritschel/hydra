c------------------------------------------------------------------
c|      Prints vector lines for generated by svic3d               |
c|      The image is displayed in proper perspective.             |
c|      *  Written 13/06/08 by Dan Lucas @ St Andrews  *          |
c------------------------------------------------------------------
      program pprint

      parameter (wpage=7.68)
c      wpage: the width (in inches) of the plotted page that 
c             is assumed by the graphics package.

      parameter (nm=10000000)
c     nm: max # of  vectors in input data (vectors.dat)

      parameter (pi=3.1415926535897932385,pif=pi/180.)
      parameter (gl=2.d0*pi/128.d0)
      dimension xp(nm),yp(nm),zp(nm)
      dimension xm(nm),ym(nm),zm(nm)
      character*40 dfile
c----------------------------------------------------------------------
      write(*,*) ' File containing the vectors (default vect.dat)'
      read(*,'(A)') dfile
      if (dfile(1:1) .eq. ' ') dfile= 'vect.dat'

      open(11,file=dfile,status='old')

      write(*,*)
      write(*,*) ' Frame to display (i.e. 1, 2, 3 ...)?'
      read(*,*) kfr
      write(*,*)

      write(*,*)
      write(*,*) ' The flow is viewed from the point (xv,yv,zv)'
      write(*,*) ' looking toward the origin.'
      write(*,*)
      write(*,*) ' Enter the latitude and longitude of the viewpoint'
      write(*,*) ' (in degrees):'
      read(*,*) alatv,alonv
c      convert to radians:
      alatv=pif*alatv
      alonv=pif*alonv
      write(*,*)
      write(*,*) ' Enter the distance of the viewpoint from the origin:'
      read(*,*) rv

      clat=cos(alatv)
      slat=sin(alatv)
      clon=cos(alonv)
      slon=sin(alonv)

c      Normal pointing from origin:
      ox=clat*clon
      oy=clat*slon
      oz=slat
c      Unit vector perpendicular to normal and parallel to x-y plane:
      ex=-slon
      ey= clon
      ez=0.
c      Cross product of this unit vector and normal:
      bx=-slat*clon
      by=-slat*slon
      bz= clat

c      Viewpoint (xv,yv,zv):
      xv=rv*ox
      yv=rv*oy
      zv=rv*oz

      z1=pi
c      Scale of domain in z
      yzmax=abs(z1*rv*bz)/sqrt(rv**2+2.*zv*z1+z1**2)
c      Multiply this by 1.2 to give a generous border:
      yzmax=1.2*yzmax

c----------------------------------------------------------------------
c      write(*,*) ' Width, in inches, of the image? '
c      read(*,*) width
      width=6.
c      Use a big width to keep final line thickness small upon reduction
      pscale=wpage*yzmax/width

c      read data from vectors.dat:
      rewind(11)
      kn=1

      if(kfr .eq. 1) goto 333
 111  kn=kn+1
      read(11,*,end=999) t
      read(11,*,end=999) nvor
      do i=1,nvor
         read(11,*)
      enddo
      if(kn .ne. kfr) goto 111

 333  continue
      read(11,*) t
      read(11,*) nvor
      do i=1,nvor
        read(11,*) xm(i),xp(i),ym(i),yp(i),zm(i),zp(i)
      enddo
      close(11)
      write(*,*) 'data read successfully'

c      initialize unix graphics:
      call gsetup
      call izoom
      call arzoom(1.,1.)
      call gscale(-pscale,pscale,-pscale,pscale)

c      draw a bold image border:
      call ggline(-yzmax,-yzmax, yzmax,-yzmax,3)
      call ggline( yzmax,-yzmax, yzmax, yzmax,3)
      call ggline( yzmax, yzmax,-yzmax, yzmax,3)
      call ggline(-yzmax, yzmax,-yzmax,-yzmax,3)

c      Create each vortex line and project into perspective plane:
      do i=1,nvor
c     ignore vortices which cross the domain boundary
            if(abs(xp(i)-xm(i)) .gt. gl) goto 222
            if(abs(yp(i)-ym(i)) .gt. gl) goto 222
            if(abs(zp(i)-zm(i)) .gt. gl) goto 222

          x=xm(i)-xv
          y=ym(i)-yv
          z=zm(i)-zv
          fac=rv/sqrt(x**2+y**2+z**2)
          x1=fac*(x*ex+y*ey+z*ez)
          y1=fac*(x*bx+y*by+z*bz)
c          Rotate image by -90 degrees to put +ve y at top of page:
          xx1=y1
          yy1=-x1

          x=xp(i)-xv
          y=yp(i)-yv
          z=zp(i)-zv
          fac=rv/sqrt(x**2+y**2+z**2)
          x2=fac*(x*ex+y*ey+z*ez)
          y2=fac*(x*bx+y*by+z*bz)
c          Rotate image by -90 degrees to put +ve y at top of page:
          xx2=y2
          yy2=-x2
          call ggline(xx1,yy1,xx2,yy2,1)
 222      continue
      enddo

c      terminate graphics:
999   call gclear
      call gend
      write(*,*) 'plot ready in output.ps'
      stop
      end
