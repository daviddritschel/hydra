#!/usr/bin/env python3

# This script plots either buoyancy or vorticity in several specified
# directories at selected times.

#========== Perform the generic imports =========
import sys,os,warnings
import numpy as np
import matplotlib.patches as mpatches
from matplotlib import pyplot as plt
from mpl_toolkits import axes_grid1
from matplotlib import ticker
from matplotlib import colors
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.artist import setp
import matplotlib.cm as cm
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

# set tick label size:
label_size = 20
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 3
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 3
mpl.rcParams['ytick.minor.width'] = 1
# set axes width:
mpl.rcParams['axes.linewidth'] = 1

#====================== Function definitions =======================
def contint(fmin,fmax):
    #Determines a nice contour interval (giving 10-20 divisions with
    #interval 1, 2 or 5x10^m for some m) given the minimum & maximum
    #values of the field data (fmin & fmax).

    fmax = 0.9999999*fmax
    fmin = 0.9999999*fmin
    #The 0.99... factor avoids having a superfluous tick interval
    #in cases where fmax-fmin is 10^m or 2x10^m

    emag = 1.0
    rmult = fmax-fmin
    while rmult < 10:
       emag = emag/10
       rmult = rmult*10

    while rmult >=  100:
       emag = emag*10
       rmult = rmult/10

    kmult = int(rmult/10)

    if kmult < 1:
       ci = emag
    elif kmult < 2:
       ci = 2*emag
    elif kmult < 4:
       ci = 4*emag
    elif kmult < 8:
       ci = 10*emag
    else:
       ci = 20*emag

    return ci

#https://stackoverflow.com/questions/61338565/change-formatting-ticks-of-colorbar
def add_colorbar(im, aspect=15, pad_fraction=0.5, **kwargs):
    """Add a vertical color bar to an image plot."""
    divider = axes_grid1.make_axes_locatable(im.axes)
    width = axes_grid1.axes_size.AxesY(im.axes, aspect=1./aspect)
    pad = axes_grid1.axes_size.Fraction(pad_fraction, width)
    current_ax = plt.gca()
    cax = divider.append_axes("right", size=width, pad=pad)
    plt.sca(current_ax)
    cbar = im.axes.figure.colorbar(im, cax=cax, **kwargs)
    cbar.ax.yaxis.set_major_locator(ticker.AutoLocator())
    cbar.ax.yaxis.set_minor_locator(ticker.AutoLocator())
    cbar.ax.yaxis.set_major_formatter(ticker.ScalarFormatter(useMathText=True, useOffset=True))
    cbar.ax.xaxis.set_major_formatter(ticker.ScalarFormatter())
    cbar.ax.ticklabel_format(style='sci', scilimits=(0, 0))
    return cbar

#=================================================================
# Set Rossby number (really, 1/N):
alpha = 0.125

# Frames to select from the data:
frame_list = [20,40,60,80]
ntimes = len(frame_list)

# Time interval between data saves (PS3D units):
dtsave = 2.0

# List of directories:
dir_list = ['/home/dgd/data/hydra/ps/plane/sqg/ps/random_zeta/k04ro0.25/', \
            '/home/dgd/data/hydra/ca/plane/sqg/caps/ranpv/n256k04ro0.25/', \
            '/home/dgd/data/hydra/ca/plane/sqg/caps/ranpv/n512k04ro0.25/', \
            '/home/dgd/data/hydra/ca/plane/sqg/caps/ranpv/n1024k04ro0.25/']
ndir = len(dir_list)

# Resolutions:
resol = [256, 256, 512, 1024]

# colours:
col = ['k','b','r','m','c','g']

# xlabels:
xlab = ['$t=40$','$t=80$','$t=120$','$t=160$']

# ylabels:
ylab = ['PS256','CA256','CA512','CA1024']

q_in = input(' Field to image: (1) buoyancy or (2) vorticity (default 1)? ')
opt = int(q_in or 1)

if opt == 1:
    data = 'bb.r4'
    sfac = 1.0
    outfile = 'compare_b.pdf'
else:
    data = 'zz.r4'
    sfac = alpha
    outfile = 'compare_z.pdf'

# Set up figure:
wid = 15.0
fig, ax = plt.subplots(figsize=[wid*1.2,wid*float(ntimes)/float(ndir)], \
                       nrows=ntimes, ncols=ndir)
ax = ax.flatten()

# Read in data and plot:
i = 0
for k in range(ndir):
    ng = int(resol[k])
    N = ng*ng
    direc = dir_list[k]

    # Read data:
    in_file = open(direc+data,'r')
    raw_array = np.fromfile(in_file,dtype=np.float32)
    in_file.close()

    d = np.empty((ng+1,ng+1))
    for m in range(ntimes):
        # Select frame:
        j = int(frame_list[m])
        if k == ndir-1:
            j-= 1
        d[0:ng,0:ng] = sfac*raw_array[j*(N+1)+1:(j+1)*(N+1)].reshape(ng,ng).T

        # Add periodic edges:
        d[ng,0:ng]=d[0,0:ng]
        d[0:ng+1,ng]=d[0:ng+1,0]

        # Get max abs value for plotting:
        if opt == 1:
            dmax = 0.5
        else:
            dmax = np.amax(abs(d))
        dmin = -dmax
        dint = contint(dmin,dmax)
        levmin = -int(-dmin/dint)
        levmax =  int( dmax/dint)
        dlevels = np.linspace(dint*float(levmin),dint*float(levmax), \
                              levmax-levmin+1)

        # Sort out x & y tick labels:
        ax0 = ax[i]
        ax0.set_box_aspect(1.0)

        ax0.set_xticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
        ax0.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=24)

        ax0.set_yticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
        ax0.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=24)

        # Add titles above top plots:
        if k == 0:
            ax0.set_title(xlab[m], fontsize=30)

        # Hide x ticks for upper rows of plots:
        if k < ndir-1:
            plt.setp(ax0.get_xticklabels(), visible=False)         
            
        # Add y labels for left hand plots:
        if m == 0:
            ax0.set_ylabel(ylab[k], fontsize=30)
        else:
            # Hide y ticks for right columns of plots:
            plt.setp(ax0.get_yticklabels(), visible=False)         
   
        # Plot image:
        im=ax0.imshow(d,cmap=cm.seismic,vmin=dmin,vmax=dmax, \
                      extent=(-np.pi,np.pi,-np.pi,np.pi), \
                      origin='lower',interpolation='bilinear')

        # Add a colorbar:
        cbar = add_colorbar(im)

        i+= 1
        
# Save figure:
fig.savefig(outfile, format='pdf', dpi=600)

print()
print(' To display the results, type:')
print()
print(' ev '+outfile+' &')
print()
