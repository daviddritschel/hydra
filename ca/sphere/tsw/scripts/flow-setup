#!/bin/csh

#=========================================================================#
#   Job setup script for the ca/sphere/tsw class of f90 codes.
#   
#=========================================================================#

#==========================================================================

echo
echo '--------------------------------------------------------'
echo '          The spherical thermal-shallow-water'
echo '          Combined Lagrangian Advection Method'
echo '--------------------------------------------------------'

# Specify code numerical method class:
set meth="ca"
# Specify code geometry:
set geom="sphere"
# Specify model equation type:
set equa="tsw"

# Ask for code version (typically OpenMP or not):
# NOT YET IMPLEMENTED
#echo
#echo ' Which version of the code should be used?'
#echo -n ' (1) Serial, or (2) OpenMP - (default 1)? '
#set version=$<
#if ($version == "") set version="1"

#if ($version == "1") then
#   set algo="caps"
#else
#   set algo="omp_caps"
#endif
set algo="caps"

#==========================================================================
# The following is totally generic!
set local_home=`homedir`
set hydradir=$local_home/$user/hydra/$meth/$geom/$equa

# Get output base directory:
set workdir=`workdir`
# Make the base data directory if it does not already exist:
if (!(-d $workdir)) mkdir $workdir
set workdir=$workdir/hydra
if (!(-d $workdir)) mkdir $workdir
set basedir=$workdir/$meth
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$geom
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$equa
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$algo
if (!(-d $basedir)) mkdir $basedir

set outdir=$workdir/$meth/$geom/$equa/$algo

# Assign source and binary directories:
set srcdir=$hydradir/$algo
set bindir=$hydradir/scripts

# Get the name of the computer to record in the job_info file below:
set host=`hostname | awk -F. '{print $(1)}'`

#==========================================================================
# generate a random number seed based on current time:
set second=`date +%-S`
set minute=`date +%-M`
set hour=`date +%-H`
set day=`date +%-d`
@ iseed = ( $second + ( 60 * ( $minute + 60 * ( $hour + ( 24 * $day ) ) ) ) )

# Create a temporary directory:
set tmpdir=$outdir/tmp{$iseed}
mkdir $tmpdir
cd $tmpdir

echo
echo ' *** Job will be built in the temporary directory '
echo $tmpdir

# Create a job information summary file:
touch job_info
echo ' Job created at                      ' `date` >> job_info
echo ' on                                  ' $host >> job_info

#==========================================================================
# Get the data generation routine to be used:
set dataopt="1"
echo
echo ' Choose one of the following flow initialisation methods:'
echo ' (1) thermal relaxation to a given height field starting from rest, or'
echo ' (2) stochastic vorticity forcing starting from a state of rest.'
echo -n ' Option (default' $dataopt')? '
set var=$<
if ($var != "") set dataopt=$var

# Set defaults for each data generation type:
if ($dataopt == "1") then 
   set datagen = "relax"
   set forcing = "n"
   set damping = "y"
   set ld = "0.05"    # Polar deformation radius
   set ng="256"       # Number of latitudes
   set nq="80"        # Number of contours used to represent PV
   set t_save="2.0"   # Coarse grid save time-interval
   set t_sim="20.0"   # Fine grid residual and contour save time-interval
   set n_period="50"  # Number of t_sim periods to run 
   set alpha="0.05"   # Thermal damping rate (per day)
   set esr="0.0"      # Enstrophy injection rate 
   set ksr="1"        # Centroid wavenumber of enstrophy injection 

else if ($dataopt == "2") then 
   set datagen = "rest-state"
   set forcing = "y"
   set damping = "y"
   set ld = "0.05"
   set ng="256"
   set nq="80"
   set t_save="2.0"
   set t_sim="20.0"
   set n_period="50"
   set alpha="0.05"
   set esr="0.1" 
   set ksr="16" 

else 
   echo ' Not a valid choice - exiting...'
   /bin/rm -r $tmpdir  
   exit(-1)
endif

#==========================================================================
# Set fixed constants:
set pi=3.14159265358979
set twopi=`echo "scale=10; 2 * $pi" | bc -l`

#==========================================================================
# Choose basic physical parameters:
echo
echo ' We consider a planet of radius 1 rotating with a period of one "day".'
echo -n ' Polar deformation length, c/2*omega, (default' $ld')? '
set var=$<
if ($var != "") set ld=$var

# Planetary rotation rate:
set omega=$twopi
# Set (short-scale) gravity wave speed:
set cgw=`echo "scale=10; 2*$omega*$ld" | bc -l`
echo ' This corresponds to a gravity wave speed of c = '$cgw

echo ' Planetary rotation rate, omega:     ' $omega >> job_info
echo ' Polar deformation length, L_d:      ' $ld >> job_info
echo ' Short-scale gravity wave speed, c:  ' $cgw >> job_info

# Set basic grid resolution:
echo
echo ' A longitude-latitude grid of dimensions 2*ng x ng is used.'
echo -n ' Number of latitudes, ng (default' $ng')? '
set var=$<
if ($var != "") set ng=$var

echo ' ' >> job_info
echo ' Horizontal grid resolution, ng:     ' $ng >> job_info

# Latitudinal grid spacing:
set gl=`echo "$pi / $ng" | bc -l`

#==========================================================================
# Set the PV jump across contours:
echo
echo -n ' Number of PV jumps used to represent the planetary vorticity (default' $nq')? '
set var=$<
if ($var != "") set nq=$var
set dq=`echo "scale=12; 4*$omega/$nq" | bc -l`

echo ' ' >> job_info
echo ' No. of PV jumps to represent f, nq: ' $nq >> job_info
echo ' PV jump across all contours, dq:    ' $dq >> job_info

#==========================================================================
# Set numerical parameters:

#-------------------------------------------------------------------
# Data save frequency:
echo
echo -n ' Time interval between data saves (default' $t_save')? '
set var=$<
if ($var != "") set t_save=$var

echo ' Time interval between data saves:   ' $t_save >> job_info

#-------------------------------------------------------------------
# Duration of each simulation period
echo -n ' Duration of each simulation period (default' $t_sim')? '
set var=$<
if ($var != "") set t_sim=$var

echo ' Duration of each simulation period: ' $t_sim >> job_info

#-------------------------------------------------------------------
# Total number of periods:
echo -n ' Total number of periods to run (default' $n_period')? '
set var=$<
if ($var != "") set n_period=$var

echo ' Total number of periods to run:     ' $n_period >> job_info

#-------------------------------------------------------------------
# Gravity-wave based time step:
set dt_gw=`echo "scale=8; $gl / $cgw" | bc -l`
echo
echo ' Gravity-wave resolving time step =' $dt_gw
echo -n ' Maximum time step to use (default' $dt_gw')? '
set dt_max=$<
if ($dt_max == "") set dt_max=$dt_gw
echo ' Gravity-wave resolving time step:   ' $dt_gw >> job_info
echo ' Maximum time step:                  ' $dt_max >> job_info

# Residual PV bi-harmonic hyperviscous damping rate per day on wavenumber ng:
#@ drate_def = ( $ng / 32 ) 
@ drate_def = ( $ng / 16 )
#WARNING: this seems to be a function of Fr too!!!
echo
echo ' The fields are damped by bi-harmonic hyperviscosity.'
echo -n ' Damping rate per day on wavenumber ng (default' $drate_def')? '
set drate=$<
if ($drate == "") set drate=$drate_def

#-------------------------------------------------------------------
# Set thermal damping rate:
if ($damping == "y") then 
   echo
   echo -n ' Thermal damping rate, alpha (default' $alpha')? '
   set var=$<
   if ($var != "") set alpha=$var

   echo ' ' >> job_info
   echo ' Thermal damping rate, alpha:        ' $alpha >> job_info
endif

# Set stochastic forcing parameters:
if ($forcing == "y") then 
   echo
   echo ' The enstrophy forcing spectrum is proportional to k^5*exp(-2k^2/k_0^2).'

   echo
   echo -n ' Wavenumber centroid k_0 of enstrophy injection (default' $ksr')? '
   set var=$<
   if ($var != "") set ksr=$var

   echo
   echo -n ' Enstrophy injection rate (default' $esr')? '
   set var=$<
   if ($var != "") set esr=$var

   echo ' ' >> job_info
   echo ' Enstrophy injection rate:           ' $esr   >> job_info
   echo ' Enstrophy injection wavenumber:     ' $ksr   >> job_info
endif

#============================================================
# Build parameter file with cpp and make all codes:

# Put all these dimensions into the dimens file needed for compilation:
mkdir src
cd src
cp $srcdir/* .
cp -r $hydradir/init .
cp -r $hydradir/post .

echo 
echo " Compiling source files....."
echo " ---------------------------------------------------"

# Use C pre-processor to put chosen parameters $copts into parameters.f90
set copts1="-DN_G=$ng -DN_PER=$n_period -DDT_MAX={$dt_max}d0 -DT_SAV={$t_save}d0 -DT_SIM={$t_sim}d0"
set copts2="-DALPHA={$alpha}d0 -DDQ={$dq}d0 -DD_RAT={$drate}d0 -DOMEGA={$omega}d0 -DC_GW={$cgw}d0"
set copts3="-DESR={$esr}d0 -DKSR=$ksr -DISEED=$iseed"
set copts=`echo $copts1 $copts2 $copts3`
precomp $copts parameters.f90

# Compile all codes and move sources to sub-directory:
make spe setup $datagen proxy_post_all install clean

cd ..
echo " ---------------------------------------------------"
echo 

#============================================================
# Execute the data generation script:
$bindir/$datagen

#==========================================================================
# Create a directory named after the data generation script:
cd ..
if (!(-d $datagen)) mkdir $datagen
cd $datagen

# Set the job directory name:
echo
echo -n ' Job directory name (default n'{$ng}'ld'{$ld}'alp'{$alpha}'dr'{$drate}')? '
set basejobdir=$<
if ($basejobdir == "") set basejobdir=n{$ng}ld{$ld}alp{$alpha}dr{$drate}

# work out the last run which has been performed:
# First make a bogus empty directory so this works!
mkdir {$basejobdir}r000
set last_run = `/bin/ls -d {$basejobdir}r??? | tail -c 4 | head -c 3`
rmdir {$basejobdir}r000

@ next_run = ( $last_run + 1 )
@ p1 = ( $next_run / 100 )
@ jr = ( $next_run - ( 100 * $p1 ) )
@ p2 = ( $jr / 10 )
@ p3 = ( $jr - ( 10 * $p2 ) )
set pind={$p1}{$p2}{$p3}

set jobdir={$basejobdir}r{$pind}

#=============================================================
# Lastly move all data to desired job directory:

# Move temporary directory to job directory:
mv $tmpdir $jobdir
cd $jobdir
set datadir=`pwd`

# Copy handy scripts for viewing spectra and zonal averages:
/bin/cp $bindir/longspec_view .
/bin/cp $bindir/spec_view .
/bin/cp $bindir/zonalview .

echo ' ' >> job_info
echo ' Job directory:' $datadir >> job_info

echo ' To set the job running, type'
echo cd $datadir
echo bjob spe
echo
