#!/usr/bin/env python3

# This script plots the surface velocity field from data in
# 3d/ux.r4 & uy.r4.

#     @@@@   Run from the current job directory   @@@@

#========== Perform the generic imports =========
import sys,os,warnings
import numpy as np
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.artist import setp
import matplotlib.cm as cm
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

# set tick label size:
label_size = 20
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 3
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 3
mpl.rcParams['ytick.minor.width'] = 1
# set axes width:
mpl.rcParams['axes.linewidth'] = 1

#====================== Function definitions =======================
def contint(fmin,fmax):
    #Determines a nice contour interval (giving 10-20 divisions with
    #interval 1, 2 or 5x10^m for some m) given the minimum & maximum
    #values of the field data (fmin & fmax).

    fmax=0.9999999*fmax
    fmin=0.9999999*fmin
    #The 0.99... factor avoids having a superfluous tick interval
    #in cases where fmax-fmin is 10^m or 2x10^m

    emag=1.0
    rmult=fmax-fmin
    while rmult < 10:
       emag=emag/10
       rmult=rmult*10

    while rmult >= 100:
       emag=emag*10
       rmult=rmult/10

    kmult=int(rmult/10)

    if kmult < 1:
       ci=emag
    elif kmult < 2:
       ci=2*emag
    elif kmult < 4:
       ci=4*emag
    elif kmult < 8:
       ci=10*emag
    else:
       ci=20*emag

    return ci

#=================================================================
# Work out grid resolution (ng & nz) by reading it from parameters.f90:
in_file=open('src/parameters.f90','r')
fread=in_file.readlines()
for line in fread:
   if ':: ng=' in line:
      pline=line

line=pline.split("=")[1]
ng=int(line.split(",")[0])
line=pline.split("=")[2]
nz=int(line.split(",")[0])+1

# To show more contour lines in main image:
mult=2

#-----------------------------------------------------
# Read horizontal velocity:
in_file=open('3d/ux.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
ux=np.empty([ng+1,ng+1])
ux[0:ng,0:ng]=A[nz-1,:,:].T

in_file=open('3d/uy.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
uy=np.empty([ng+1,ng+1])
uy[0:ng,0:ng]=A[nz-1,:,:].T

#-----------------------------------------------------
# Add periodic edges:
ux[ng,0:ng]=ux[0,0:ng]
ux[0:ng+1,ng]=ux[0:ng+1,0]
uy[ng,0:ng]=uy[0,0:ng]
uy[0:ng+1,ng]=uy[0:ng+1,0]

#-----------------------------------------------------
# Work out u_x contour values:
uxmin=np.amin(ux)
uxmax=np.amax(ux)
uxmag=max(-uxmin,uxmax)
uxmin=-uxmag
uxmax=uxmag

dux=contint(uxmin,uxmax)
jmin=-int(-uxmin/dux)
jmax= int( uxmax/dux)
clevels1=np.linspace(dux*(float(jmin)-0.5),dux*(float(jmax)+0.5),jmax-jmin+2)
dux=dux/mult
jmin=-int(-uxmin/dux)
jmax= int( uxmax/dux)
clevels1f=np.linspace(dux*(float(jmin)-0.5),dux*(float(jmax)+0.5),jmax-jmin+2)

#-----------------------------------------------------
# Work out u_y contour values:
uymin=np.amin(uy)
uymax=np.amax(uy)
uymag=max(-uymin,uymax)
uymin=-uymag
uymax=uymag

duy=contint(uymin,uymax)
jmin=-int(-uymin/duy)
jmax= int( uymax/duy)
clevels2=np.linspace(duy*(float(jmin)-0.5),duy*(float(jmax)+0.5),jmax-jmin+2)
duy=duy/mult
jmin=-int(-uymin/duy)
jmax= int( uymax/duy)
clevels2f=np.linspace(duy*(float(jmin)-0.5),duy*(float(jmax)+0.5),jmax-jmin+2)

#==============================================================================
# Set up figure:

fig, (ax1, ax2) = plt.subplots(figsize=[14,7], nrows=1, ncols=2)

ax1.set_xlim([-np.pi,np.pi])
ax1.set_ylim([-np.pi,np.pi])
ax2.set_xlim([-np.pi,np.pi])
ax2.set_ylim([-np.pi,np.pi])

# Customise tick values:
ax1.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

ax1.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

# Fine-tune figure; hide y ticks for right plot:
plt.setp(ax2.get_yticklabels(), visible=False)

ax1.set_title('$u(x,y,0)$', fontsize=20)
ax2.set_title('$v(x,y,0)$', fontsize=20)

ax1.set_xlabel('$x$', fontsize=20)
ax2.set_xlabel('$x$', fontsize=20)
ax1.set_ylabel('$y$', fontsize=20)

extent=(-np.pi,np.pi,-np.pi,np.pi)

# Plot the image in an array with an optional colourbar:
im1=ax1.imshow(ux,cmap=cm.seismic,vmin=uxmin,vmax=uxmax,extent=extent,origin='lower',interpolation='bilinear')
cs1=ax1.contour(ux, clevels1f, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax1)
cax1 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im1, cax=cax1, ticks=clevels1)
cbar.add_lines(cs1)

im2=ax2.imshow(uy,cmap=cm.seismic,vmin=uymin,vmax=uymax,extent=extent,origin='lower',interpolation='bilinear')
cs2=ax2.contour(uy, clevels2f, colors='k', extent=extent, linewidths=1)
divider = make_axes_locatable(ax2)
cax2 = divider.append_axes("right", size="4%", pad=0.1)
cbar=fig.colorbar(im2, cax=cax2, ticks=clevels2)
cbar.add_lines(cs2)

#=========================================================================
# Save image:
fig.savefig('uxuy.eps', format='eps', dpi=600)

print()
print(' To view the image, type')
print()
print(' gv uxuy.eps &')
print()
