#!/usr/bin/env python

# This script plots the scaled surface buoyancy and vorticity
# from data in 3d/ba.r4, ox.r4, oy.r4 and oz.r4.

#     @@@@   Run from the current job directory   @@@@

#========== Perform the generic imports =========
import sys,os,warnings
import numpy as np
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from matplotlib.artist import setp
import matplotlib.cm as cm
import matplotlib as mpl
from matplotlib import rcParams
from matplotlib import rc
rcParams.update({'figure.autolayout': True})
warnings.simplefilter("ignore",DeprecationWarning)
from mpl_toolkits.axes_grid1 import ImageGrid

# Ensure latex fonts throughout:
rc('font', **{'family': 'Times New Roman'})
rc('text', usetex=True)

# set tick label size:
label_size = 20
mpl.rcParams['xtick.labelsize'] = label_size
mpl.rcParams['ytick.labelsize'] = label_size
# set x tick width and size:
mpl.rcParams['xtick.major.size'] = 5
mpl.rcParams['xtick.major.width'] = 2
mpl.rcParams['xtick.minor.size'] = 3
mpl.rcParams['xtick.minor.width'] = 1
# set y tick width and size:
mpl.rcParams['ytick.major.size'] = 5
mpl.rcParams['ytick.major.width'] = 2
mpl.rcParams['ytick.minor.size'] = 3
mpl.rcParams['ytick.minor.width'] = 1
# set axes width:
mpl.rcParams['axes.linewidth'] = 1

#====================== Function definitions =======================
def contint(fmin,fmax):
    #Determines a nice contour interval (giving 10-20 divisions with
    #interval 1, 2 or 5x10^m for some m) given the minimum & maximum
    #values of the field data (fmin & fmax).

    fmax=0.9999999*fmax
    fmin=0.9999999*fmin
    #The 0.99... factor avoids having a superfluous tick interval
    #in cases where fmax-fmin is 10^m or 2x10^m

    emag=1.0
    rmult=fmax-fmin
    while rmult < 10:
       emag=emag/10
       rmult=rmult*10

    while rmult >= 100:
       emag=emag*10
       rmult=rmult/10

    kmult=int(rmult/10)

    if kmult < 1:
       ci=emag
    elif kmult < 2:
       ci=2*emag
    elif kmult < 4:
       ci=4*emag
    elif kmult < 8:
       ci=10*emag
    else:
       ci=20*emag

    return ci

#======================================================================
# Work out grid resolution (ng & nz) by reading it from parameters.f90:
in_file=open('src/parameters.f90','r')
fread=in_file.readlines()
for line in fread:
   if ':: ng=' in line:
      pline=line

line=pline.split("=")[1]
ng=int(line.split(",")[0])
line=pline.split("=")[2]
nz=int(line.split(",")[0])+1

# Also read f & N for scaling purposes:
for line in fread:
   if ':: cof=' in line:
      pline=line

line=pline.split("=")[1]
txt=line.split(",")[0]
cof=float(txt.rstrip("d0"))
line=pline.split("=")[2]
txt=line.split(",")[0]
bvf=float(txt.rstrip("d0\n"))

# To show more contour lines, use mult > 1:
mult=2

#-----------------------------------------------------
# Read pressure and scale:
in_file=open('3d/pp.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
pp=np.empty([ng+1,ng+1])
sc=1.0/(cof*cof)
pp[0:ng,0:ng]=sc*A[nz-1,:,:].T

ppmax=np.amax(pp)
ppmin=np.amin(pp)
alpha=ppmax
sc=1.0/alpha
pp=sc*pp

# Read buoyancy anomaly and scale:
in_file=open('3d/ba.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
bb=np.empty([ng+1,ng+1])
sc=1.0/(alpha*cof*bvf)
bb[0:ng,0:ng]=sc*A[nz-1,:,:].T

# Read vorticity:
in_file=open('3d/ox.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
ox=np.empty([ng+1,ng+1])
sc=1.0/(alpha*bvf)
ox[0:ng,0:ng]=sc*A[nz-1,:,:].T

in_file=open('3d/oy.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
oy=np.empty([ng+1,ng+1])
sc=1.0/(alpha*bvf)
oy[0:ng,0:ng]=sc*A[nz-1,:,:].T

in_file=open('3d/oz.r4','r')
raw_array=np.fromfile(in_file,dtype=np.float32)
in_file.close()
A=np.empty([nz,ng,ng])
A=raw_array[1:nz*ng*ng+1].reshape(nz,ng,ng)
oz=np.empty([ng+1,ng+1])
sc=1.0/(alpha*cof)
oz[0:ng,0:ng]=sc*A[nz-1,:,:].T

#-----------------------------------------------------
# Add periodic edges:
bb[ng,0:ng]=bb[0,0:ng]
bb[0:ng+1,ng]=bb[0:ng+1,0]
ox[ng,0:ng]=ox[0,0:ng]
ox[0:ng+1,ng]=ox[0:ng+1,0]
oy[ng,0:ng]=oy[0,0:ng]
oy[0:ng+1,ng]=oy[0:ng+1,0]
oz[ng,0:ng]=oz[0,0:ng]
oz[0:ng+1,ng]=oz[0:ng+1,0]

print()

#-----------------------------------------------------
# Work out buoyancy contour values:
print()
print(' *** Using alpha = p_max/f^2 =',round(alpha,3))
print()
bbmin=np.amin(bb)
bbmax=np.amax(bb)
print('  b_min/(f N alpha) =',round(bbmin,5),'     b_max/(f N alpha) =',round(bbmax,5))
bbmag=max(-bbmin,bbmax)
bbmin=-bbmag
bbmax=bbmag

dbb=contint(bbmin,bbmax)
jmin=-int(-bbmin/dbb)
jmax= int( bbmax/dbb)
clevels1=np.linspace(dbb*float(jmin),dbb*float(jmax),jmax-jmin+1)
dbb=dbb/mult
jmin=-int(-bbmin/dbb)
jmax= int( bbmax/dbb)
clevels1f=np.linspace(dbb*float(jmin),dbb*float(jmax),jmax-jmin+1)

#-----------------------------------------------------
# Work out z vorticity contour values:
ozmin=np.amin(oz)
ozmax=np.amax(oz)
print(' zeta_min/(f alpha) =',round(ozmin,5),'    zeta_max/(f alpha) =',round(ozmax,5))
ozmag=max(-ozmin,ozmax)
ozmin=-ozmag
ozmax=ozmag

doz=contint(ozmin,ozmax)
jmin=-int(-ozmin/doz)
jmax= int( ozmax/doz)
clevels2=np.linspace(doz*float(jmin),doz*float(jmax),jmax-jmin+1)
doz=doz/mult
jmin=-int(-ozmin/doz)
jmax= int( ozmax/doz)
clevels2f=np.linspace(doz*float(jmin),doz*float(jmax),jmax-jmin+1)

#-----------------------------------------------------
# Work out x vorticity contour values:
oxmin=np.amin(ox)
oxmax=np.amax(ox)
print('   xi_min/(N alpha) =',round(oxmin,5),'      xi_max/(N alpha) =',round(oxmax,5))
oxmag=max(-oxmin,oxmax)
oxmin=-oxmag
oxmax=oxmag

dox=contint(oxmin,oxmax)
jmin=-int(-oxmin/dox)
jmax= int( oxmax/dox)
clevels3=np.linspace(dox*float(jmin),dox*float(jmax),jmax-jmin+1)
dox=dox/mult
jmin=-int(-oxmin/dox)
jmax= int( oxmax/dox)
clevels3f=np.linspace(dox*float(jmin),dox*float(jmax),jmax-jmin+1)

#-----------------------------------------------------
# Work out y vorticity contour values:
oymin=np.amin(oy)
oymax=np.amax(oy)
print('  eta_min/(N alpha) =',round(oymin,5),'     eta_max/(N alpha) =',round(oymax,5))
oymag=max(-oymin,oymax)
oymin=-oymag
oymax=oymag

doy=contint(oymin,oymax)
jmin=-int(-oymin/doy)
jmax= int( oymax/doy)
clevels4=np.linspace(doy*float(jmin),doy*float(jmax),jmax-jmin+1)
doy=doy/mult
jmin=-int(-oymin/doy)
jmax= int( oymax/doy)
clevels4f=np.linspace(doy*float(jmin),doy*float(jmax),jmax-jmin+1)

#==============================================================================
# Set up figure:
fig = plt.figure(figsize=(14, 12), dpi=200)
grid = ImageGrid(fig, 111,
                 nrows_ncols=(2, 2),
                 aspect=True,
                 axes_pad=(1.0, 1.0),
                 direction='row',
                 share_all=False,
                 cbar_location="right",
                 cbar_mode='each',
                 cbar_size="4%",
                 cbar_pad=0.05)

ax1 = grid[0]
ax2 = grid[1]
ax3 = grid[2]
ax4 = grid[3]

ax1.set_xlim([-np.pi,np.pi])
ax1.set_ylim([-np.pi,np.pi])
ax2.set_xlim([-np.pi,np.pi])
ax2.set_ylim([-np.pi,np.pi])
ax3.set_xlim([-np.pi,np.pi])
ax3.set_ylim([-np.pi,np.pi])
ax4.set_xlim([-np.pi,np.pi])
ax4.set_ylim([-np.pi,np.pi])

# Customise tick values:
ax1.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax3.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax4.xaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax3.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax4.set_xticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

ax1.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax2.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax3.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax4.yaxis.set_ticks([-np.pi,-np.pi/2.0,0.0,np.pi/2.0,np.pi])
ax1.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax2.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax3.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)
ax4.set_yticklabels([r'$-\pi$',r'$-\pi/2$',r'$0$',r'$\pi/2$',r'$\pi$'],fontsize=20)

# Fine-tune figure; hide x ticks for upper plots:
plt.setp(ax1.get_xticklabels(), visible=False)
plt.setp(ax2.get_xticklabels(), visible=False)

# Fine-tune figure; hide y ticks for right plots:
plt.setp(ax2.get_yticklabels(), visible=False)
plt.setp(ax4.get_yticklabels(), visible=False)

ax1.set_title('$b/(fNL\\alpha)$', fontsize=20)
ax2.set_title('$\\zeta/(f\\alpha)$', fontsize=20)
ax3.set_title('$\\xi/(N\\alpha)$', fontsize=20)
ax4.set_title('$\\eta/(N\\alpha)$', fontsize=20)

ax3.set_xlabel('$x/L$', fontsize=20)
ax4.set_xlabel('$x/L$', fontsize=20)
ax1.set_ylabel('$y/L$', fontsize=20)
ax3.set_ylabel('$y/L$', fontsize=20)

extent=(-np.pi,np.pi,-np.pi,np.pi)

# Plot the image in an array with an optional colourbar:
im1=ax1.imshow(bb,cmap=cm.bwr,vmin=bbmin,vmax=bbmax,extent=extent,origin='lower',interpolation='bilinear')
cs1=ax1.contour(bb, clevels1, colors='k', extent=extent, linewidths=1)
cbar=ax1.cax.colorbar(im1, ticks=clevels1)
cbar.add_lines(cs1)

im2=ax2.imshow(oz,cmap=cm.bwr,vmin=ozmin,vmax=ozmax,extent=extent,origin='lower',interpolation='bilinear')
cs2=ax2.contour(oz, clevels2, colors='k', extent=extent, linewidths=1)
cbar=ax2.cax.colorbar(im2, ticks=clevels2)
cbar.add_lines(cs2)

im3=ax3.imshow(ox,cmap=cm.bwr,vmin=oxmin,vmax=oxmax,extent=extent,origin='lower',interpolation='bilinear')
cs3=ax3.contour(ox, clevels3, colors='k', extent=extent, linewidths=1)
cbar=ax3.cax.colorbar(im3, ticks=clevels3)
cbar.add_lines(cs3)

im4=ax4.imshow(oy,cmap=cm.bwr,vmin=oymin,vmax=oymax,extent=extent,origin='lower',interpolation='bilinear')
cs4=ax4.contour(oy, clevels4, colors='k', extent=extent, linewidths=1)
cbar=ax4.cax.colorbar(im4, ticks=clevels4)
cbar.add_lines(cs4)

#=========================================================================
# Save image:
fig.tight_layout()
fig.savefig('surface.pdf', format='pdf', dpi=600, bbox_inches='tight')

print()
print(' To view the image, type')
print()
print(' evince surface.pdf &')
print()
